/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package presentationTier;


import dataTier.Database;
import static dataTier.Database.createTable;
import static dataTier.Database.dropTable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 110310587
 */
public class frmDatabases extends javax.swing.JFrame {
    private static String dbURL = "jdbc:derby:DATABASE;create=true;user=test;password=test";
    private static Connection conn = null;
    private static Statement stmt = null;
   
    public DefaultListModel myListModel = new DefaultListModel();
    /**
     * Creates new form frmDatabases
     */
    public frmDatabases() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtpDatabases = new javax.swing.JTabbedPane();
        pnlItems = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnPopulateItems = new javax.swing.JButton();
        btnDefaultItems = new javax.swing.JButton();
        btnClearItems = new javax.swing.JButton();
        pnlOrderItems = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnPopulateOrderItems = new javax.swing.JButton();
        btnDefOrderItems = new javax.swing.JButton();
        clearOrderItemJTable = new javax.swing.JButton();
        pnlOrders = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        btnOrdersPopulate = new javax.swing.JButton();
        btnDefaultOrders = new javax.swing.JButton();
        btnClearOrderJTable = new javax.swing.JButton();
        pnlEmployees = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployees = new javax.swing.JTable();
        btnPopulateItems3 = new javax.swing.JButton();
        btnDefaultEmployees = new javax.swing.JButton();
        btnClearEmployeeJTable = new javax.swing.JButton();
        pnlPayTest = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstTestOrders = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblTest = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(14, 30, 71));

        jPanel1.setBackground(new java.awt.Color(50, 70, 111));

        pnlItems.setBackground(new java.awt.Color(50, 70, 111));

        tblItems.setBackground(new java.awt.Color(204, 204, 214));
        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ItemID", "Name", "Price", "Special"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblItems);
        if (tblItems.getColumnModel().getColumnCount() > 0) {
            tblItems.getColumnModel().getColumn(0).setResizable(false);
        }

        btnPopulateItems.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnPopulateItems.setText("Populate Table");
        btnPopulateItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPopulateItemsActionPerformed(evt);
            }
        });

        btnDefaultItems.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnDefaultItems.setText("Reset Database Table to Default");
        btnDefaultItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultItemsActionPerformed(evt);
            }
        });

        btnClearItems.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnClearItems.setText("Clear Table");
        btnClearItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlItemsLayout = new javax.swing.GroupLayout(pnlItems);
        pnlItems.setLayout(pnlItemsLayout);
        pnlItemsLayout.setHorizontalGroup(
            pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemsLayout.createSequentialGroup()
                        .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClearItems, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPopulateItems, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemsLayout.createSequentialGroup()
                        .addComponent(btnDefaultItems)
                        .addGap(23, 23, 23))))
        );
        pnlItemsLayout.setVerticalGroup(
            pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemsLayout.createSequentialGroup()
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlItemsLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnPopulateItems)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearItems)
                        .addGap(440, 440, 440)
                        .addComponent(btnDefaultItems))
                    .addGroup(pnlItemsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jtpDatabases.addTab("Items", pnlItems);

        pnlOrderItems.setBackground(new java.awt.Color(50, 70, 111));

        tblOrderItems.setBackground(new java.awt.Color(204, 204, 214));
        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order Item ID", "OrderID", "Item ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblOrderItems);

        btnPopulateOrderItems.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnPopulateOrderItems.setText("Populate Table");
        btnPopulateOrderItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPopulateOrderItemsActionPerformed(evt);
            }
        });

        btnDefOrderItems.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnDefOrderItems.setText("Reset Database Table to Default");
        btnDefOrderItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefOrderItemsActionPerformed(evt);
            }
        });

        clearOrderItemJTable.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        clearOrderItemJTable.setText("Clear Table");
        clearOrderItemJTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearOrderItemJTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOrderItemsLayout = new javax.swing.GroupLayout(pnlOrderItems);
        pnlOrderItems.setLayout(pnlOrderItemsLayout);
        pnlOrderItemsLayout.setHorizontalGroup(
            pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderItemsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOrderItemsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addGroup(pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPopulateOrderItems, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearOrderItemJTable, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93))
                    .addGroup(pnlOrderItemsLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnDefOrderItems)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlOrderItemsLayout.setVerticalGroup(
            pnlOrderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlOrderItemsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnPopulateOrderItems)
                .addGap(24, 24, 24)
                .addComponent(clearOrderItemJTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDefOrderItems)
                .addGap(76, 76, 76))
        );

        jtpDatabases.addTab("Order Items", pnlOrderItems);

        pnlOrders.setBackground(new java.awt.Color(50, 70, 111));

        tblOrders.setBackground(new java.awt.Color(204, 204, 214));
        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "EmpID", "Price", "Time", "Date", "TableID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrders);

        btnOrdersPopulate.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnOrdersPopulate.setText("Populate Table");
        btnOrdersPopulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdersPopulateActionPerformed(evt);
            }
        });

        btnDefaultOrders.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnDefaultOrders.setText("Reset Database Table to Default");
        btnDefaultOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultOrdersActionPerformed(evt);
            }
        });

        btnClearOrderJTable.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnClearOrderJTable.setText("Clear Table");
        btnClearOrderJTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOrderJTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOrdersLayout = new javax.swing.GroupLayout(pnlOrders);
        pnlOrders.setLayout(pnlOrdersLayout);
        pnlOrdersLayout.setHorizontalGroup(
            pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDefaultOrders)
                        .addGap(116, 116, 116))
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOrdersPopulate, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(btnClearOrderJTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlOrdersLayout.setVerticalGroup(
            pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrdersLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addComponent(btnOrdersPopulate)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearOrderJTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 448, Short.MAX_VALUE)
                        .addComponent(btnDefaultOrders)
                        .addGap(30, 30, 30))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpDatabases.addTab("Orders", pnlOrders);

        pnlEmployees.setBackground(new java.awt.Color(50, 70, 111));

        tblEmployees.setBackground(new java.awt.Color(204, 204, 214));
        tblEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "EmpID", "FName", "SName", "Address", "DOB", "Manager", "EmpCode", "MPass", "Signed In"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployees);
        if (tblEmployees.getColumnModel().getColumnCount() > 0) {
            tblEmployees.getColumnModel().getColumn(0).setResizable(false);
        }

        btnPopulateItems3.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnPopulateItems3.setText("Populate Table");
        btnPopulateItems3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPopulateItems3ActionPerformed(evt);
            }
        });

        btnDefaultEmployees.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        btnDefaultEmployees.setText("Reset Database Table to Default");
        btnDefaultEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultEmployeesActionPerformed(evt);
            }
        });

        btnClearEmployeeJTable.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnClearEmployeeJTable.setText("Clear Table");
        btnClearEmployeeJTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearEmployeeJTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEmployeesLayout = new javax.swing.GroupLayout(pnlEmployees);
        pnlEmployees.setLayout(pnlEmployeesLayout);
        pnlEmployeesLayout.setHorizontalGroup(
            pnlEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDefaultEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeesLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(pnlEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPopulateItems3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClearEmployeeJTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(55, 55, 55))))
        );
        pnlEmployeesLayout.setVerticalGroup(
            pnlEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEmployeesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEmployeesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addGroup(pnlEmployeesLayout.createSequentialGroup()
                        .addComponent(btnPopulateItems3)
                        .addGap(27, 27, 27)
                        .addComponent(btnClearEmployeeJTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDefaultEmployees)))
                .addContainerGap())
        );

        jtpDatabases.addTab("Employees", pnlEmployees);

        pnlPayTest.setBackground(new java.awt.Color(50, 70, 111));

        lstTestOrders.setBackground(new java.awt.Color(204, 204, 214));
        lstTestOrders.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstTestOrders.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstTestOrdersValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstTestOrders);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Order No:");

        jButton2.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jButton2.setText("Fill Orders");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tblTest.setBackground(new java.awt.Color(204, 204, 214));
        tblTest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order Item ID", "OrderID", "Item ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblTest);

        javax.swing.GroupLayout pnlPayTestLayout = new javax.swing.GroupLayout(pnlPayTest);
        pnlPayTest.setLayout(pnlPayTestLayout);
        pnlPayTestLayout.setHorizontalGroup(
            pnlPayTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPayTestLayout.createSequentialGroup()
                .addGroup(pnlPayTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPayTestLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnlPayTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jButton2))
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPayTestLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
        );
        pnlPayTestLayout.setVerticalGroup(
            pnlPayTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPayTestLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlPayTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPayTestLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpDatabases.addTab("Payment Test", pnlPayTest);

        jButton1.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left224.png"))); // NOI18N
        jButton1.setText("Back to Manager");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jtpDatabases, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jtpDatabases, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPopulateItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPopulateItemsActionPerformed
        populateItemsTable(tblItems, "ITEMS");
    }//GEN-LAST:event_btnPopulateItemsActionPerformed
    
    private void btnDefaultItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultItemsActionPerformed
        //delete table
        Database.dropTable("ITEMS");
        System.out.println("Table Deleted");
        
        //create table
        Database.createTable("create table ITEMS (ITEM_ID int, NAME varchar(255),PRICE varchar(255),SPECIAL boolean)");
        System.out.println("Table Created");
        try
        {
        createConnection();
        stmt = conn.createStatement();
        //insert code from http://www.tutorialspoint.com/jdbc/jdbc-insert-records.htm
        /*String sql = "INSERT INTO ITEMS VALUES "
                + "(0, 'Burger', '3', false),"
                + "(1, 'Chips', '3',false)";*/
        
        String sql = "INSERT INTO ITEMS VALUES "
                + "(0, 'Garlic Bread', '5.50', false),"
                + "(1, 'Bruschetta', '6.50', false),"
		+ "(2, 'Mozzarella Sticks', '6.25', false),"
		+ "(3, 'Chicken Goujons', '6.75', false),"
                + "(4, 'Mini Ribs', '7.50', false),"
		+ "(5, 'Potato Skins', '7.25', false),"
		+ "(6, 'Breaded Mushrooms', '6.25', false),"
                + "(7, 'Jalapeno Poppers', '6.50', false),"
		+ "(8, 'Sharing Platter', '15', false),"
		+ "(9, 'Buffalo Wings To Share', '12', false),"
                + "(10, 'Vegetarian Nachos', '8.75', false),"
		+ "(11, 'Chicken Nachos', '9.75', false),"
		+ "(12, 'Chilli Nachos', '10.75', false),"
                + "(13, 'Chilli/Chicken Nachos', '10.75', false),"
		+ "(14, 'Bloomin Onion', '9.50', false),"
		+ "(15, 'Poppin Shrimp', '7.75', false),"
                + "(16, 'Vegetable Soup', '5.25', false),"
		+ "(17, 'Potato Soup', '5.25', false),"
		+ "(18, 'Tomato Soup', '5.25', false),"
                + "(19, 'Chicken Soup', '5.25', false),"
		+ "(20, 'BBQ Burger', '14.25', false),"
		+ "(21, 'Cheese & Bacon Burger', '14.75', false),"
                + "(22, 'O.T.T. Burger', '14.25', false),"
		+ "(23, 'Deluxe Burger', '13.25', false),"
		+ "(24, 'Veggie Fajita', '13.75', false),"
                + "(25, 'Veggie Burger', '12.75', false),"
		+ "(26, 'Veggie Enchilada', '12.75', false),"
		+ "(27, 'Veggie Burrito', '12.50', false),"
                + "(28, 'Striploin Steak', '14.75', false),"
		+ "(29, 'Fillet Steak', '28', false),"
		+ "(30, 'Rib Eye Steak', '20.25', false),"
                + "(31, 'Sirloin Steak', '24.50', false),"
		+ "(32, 'Cajun Chicken Burger', '14.25', false),"
		+ "(33, 'Chicken Parmesan', '14.75', false),"
                + "(34, 'Chicken/Cheese Enchilada', '14.50', false),"
		+ "(35, 'Grilled Chicken Deluxe', '13.25', false),"
		+ "(36, 'Margherita Pizza', '12.50', false),"
                + "(37, 'Hawaiian Pizza', '12.50', false),"
                + "(38, 'Chicken Pizza', '12.50', false),"
      		+ "(39, 'Pepperoni Pizza', '14.25', false),"
                + "(40, 'Fries', '3.25', false),"
		+ "(41, 'Sweet Potato Fries', '4.75', false),"
		+ "(42, 'Chilli Fries', '4.25', false),"
                + "(43, 'Garlic Fries', '4.25', false),"
		+ "(44, 'Onion Rings', '4.75', false),"
		+ "(45, 'Spicy Potato Wedges', '4.50', false),"
                + "(46, 'Baked Potato', '3.50', false),"
		+ "(47, 'Chilli Baked Potato', '4.50', false),"
		+ "(48, 'Garlic Cheesy Bread', '5.50', false),"
                + "(49, 'Fried Mushrooms', '2', false),"
		+ "(50, 'Fried Onions', '2', false),"
		+ "(51, 'Fried Onions/Mushrooms', '2.75', false),"
                + "(52, 'Side Salad', '2.75', false),"
		+ "(53, 'Mini Caesar Salad', '3.75', false),"
		+ "(54, 'Coleslaw', '2.50', false),"
                + "(55, 'Celery Sticks', '2', false),"
		+ "(56, 'Rice', '4', false),"
		+ "(57, 'Mashed Potatoes', '4.50', false),"
                + "(58, 'Baked Potato', '6.25', false),"
		+ "(59, 'Rusty Spoon', '5', false),"
		+ "(60, 'Chocolate Sundae', '6.75', false),"
                + "(61, 'Fudge Sundae', '6.75', false),"
		+ "(62, 'Meringue Sundae', '6.75', false),"
		+ "(63, 'Cookie Sundae', '6.75', false),"
                + "(64, 'Knickerbocker Glory', '6.75', false),"
		+ "(65, 'Ice Cream & Chocolate', '5.25', false),"
		+ "(66, 'Banana Split', '6.75', false),"
                + "(67, 'Captains Brownie', '6.75', false),"
		+ "(68, 'Death By Chocolate', '6.75', false),"
		+ "(69, 'Thick Cold Milkshake', '5.50', false),"
                + "(70, 'Apple Pie', '6.75', false),"
		+ "(71, 'Banoffi Pie', '6.75', false),"
		+ "(72, 'Cookie Sandwich', '6.75', false),"
                + "(73, 'Doughnut Balls', '6.75', false),"
		+ "(74, 'Volcano Cake', '19.75', false),"
		+ "(75, 'Birthday Cake', '29.75', false),"
                + "(76, 'Vanilla Milkshake', '3', false),"
		+ "(77, 'Strawberry Milkshake', '3', false),"
		+ "(78, 'Banana Milkshake', '3', false),"
                + "(79, 'Chocolate Milkshake', '3', false),"
		+ "(80, 'Espresso', '2', false),"
		+ "(81, 'Americano', '2.75', false),"
                + "(82, 'Latte', '2.75', false),"
		+ "(83, 'Cappuccino', '2.75', false),"
		+ "(84, 'Tea', '2', false),"
                + "(85, 'Chamomile Tea', '2.50', false),"
		+ "(86, 'Peppermint Tea', '2.50', false),"
		+ "(87, 'Green Tea', '2.50', false),"
                + "(88, 'Beer', '6', false),"
		+ "(89, 'Cider', '6', false),"
		+ "(90, 'Spirit', '6.50', false),"
                + "(91, 'Stout', '6', false),"
		+ "(92, 'Whiskey Sour', '5.50', false),"
		+ "(93, 'Mango Daiquiri', '5.50', false),"
                + "(94, 'Lemon Drop', '5.50', false),"
		+ "(95, 'Manhattan', '5.50', false),"
		+ "(96, 'Coke', '3', false),"
		+ "(97, 'Diet Coke', '3', false),"
                + "(98, 'Sprite', '3', false),"
		+ "(99, 'Fanta', '3', false),"
                + "(100, 'Cod & Chips', '10.00', true),"
		+ "(101, '4th of July', '7.50', true),"
                + "(102, 'Veal Burger', '12.00', true),"
		+ "(103, 'Chicken Kebab', '11.00', true),"
		+ "(104, 'BLT', '12.50', true),"            
                + "(105, 'Special', '5', true),"
		+ "(106, 'Special', '5', true),"
		+ "(107, 'Special', '5', true),"
                + "(108, 'Special', '5', true),"
		+ "(109, 'Special', '5', true),"
		+ "(110, 'Special', '5', true),"
                + "(111, 'Special', '5', true),"
		+ "(112, 'Special', '5', true),"
		+ "(113, 'Special', '5', true),"
                + "(114, 'Special', '5', true),"
		+ "(115, 'Special', '5', true),"
		+ "(116, 'Special', '5', true),"
		+ "(117, 'Special', '5', true),"
                + "(118, 'Special', '5', true),"
		+ "(119, 'Special', '5', true)";
        stmt.executeUpdate(sql);
        System.out.println("Insert statement successful");
        }
        catch(SQLException e)
        {
          System.out.println(e);
        }
        
        
    }//GEN-LAST:event_btnDefaultItemsActionPerformed

    private void btnPopulateOrderItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPopulateOrderItemsActionPerformed
       
        
        int ORDER_ITEM_ID= 0;
         int ORDER_ID = 0;
         int ITEM_ID = 0;
         int r = 0;
        try
        {
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select * from ORDER_ITEMS");
            ResultSetMetaData rsmd = results.getMetaData();
            int numberCols = rsmd.getColumnCount();
            for (int i=1; i<=numberCols; i++)
            {
                //print Column Names
                System.out.print(rsmd.getColumnLabel(i)+"\t");  
            }
           System.out.println();
            
            while(results.next())
            {
  
            ORDER_ITEM_ID = results.getInt(1);
            ORDER_ID = results.getInt(2);
            ITEM_ID = results.getInt(3);
    
            tblOrderItems.setValueAt(ORDER_ITEM_ID,r, 0);
            tblOrderItems.setValueAt(ORDER_ID,r, 1);
            tblOrderItems.setValueAt(ITEM_ID,r, 2);
      
            r++;
            }
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
        
    }//GEN-LAST:event_btnPopulateOrderItemsActionPerformed

    private void btnOrdersPopulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersPopulateActionPerformed
         //ORDER_ID (INT), EMP_ID (INT), PRICE (VARCHAR), TIME (VARCHAR), DATE (VARCHAR) 
        int ORDER_ID= 0;
        int EMP_ID = 0;
        String PRICE = "";
        String TIME = "";
        String DATE = "";
        int TABLE_ID;
        int r = 0;
        try
        {
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select * from ORDERS");
            ResultSetMetaData rsmd = results.getMetaData();
            int numberCols = rsmd.getColumnCount();
            for (int i=1; i<=numberCols; i++)
            {
                //print Column Names
                System.out.print(rsmd.getColumnLabel(i)+"\t");  
            }
           System.out.println();
            
            while(results.next())
            {
              
                
            ORDER_ID = results.getInt(1);
            EMP_ID = results.getInt(2);
            PRICE = results.getString(3);
            TIME = results.getString(4);
            DATE = results.getString(5);
            TABLE_ID = results.getInt(6);
    
            
   
            tblOrders.setValueAt(ORDER_ID,r, 0);
            tblOrders.setValueAt(EMP_ID,r, 1);
            tblOrders.setValueAt(PRICE,r, 2);
            tblOrders.setValueAt(TIME,r, 3);
            tblOrders.setValueAt(DATE,r, 4);
            tblOrders.setValueAt(TABLE_ID,r,5);
      
            r++;
            }
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
        
    }//GEN-LAST:event_btnOrdersPopulateActionPerformed

    private void btnPopulateItems3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPopulateItems3ActionPerformed
           //EMP_ID int, FNAME varchar(255),SNAME varchar(255), ADDRESS varchar(255),DOB varchar(255),
            //MANAGER boolean, EMPCODE varchar(255), MPASS varchar(255))
        int EMP_ID= 0;
        String FNAME;
        String SNAME;
        String ADDRESS;
        String DOB;
        boolean MANAGER;
        String EMPCODE;
        String MPASS;
        int r = 0;
        try
        {
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select * from EMPLOYEES");
            ResultSetMetaData rsmd = results.getMetaData();
            int numberCols = rsmd.getColumnCount();
            for (int i=1; i<=numberCols; i++)
            {
                //print Column Names
                System.out.print(rsmd.getColumnLabel(i)+"\t");  
            }
           System.out.println();
            
            while(results.next())
            {
               
                
            
            EMP_ID = results.getInt(1);
            FNAME = results.getString(2);
            SNAME = results.getString(3);
            ADDRESS = results.getString(4);
            DOB = results.getString(5);
            MANAGER = results.getBoolean(6);
            EMPCODE = results.getString(7);
            MPASS = results.getString(8);
           
    
           
   
            tblEmployees.setValueAt(EMP_ID,r, 0);
            tblEmployees.setValueAt(FNAME,r, 1);
            tblEmployees.setValueAt(SNAME,r, 2);
            tblEmployees.setValueAt(ADDRESS,r, 3);
            tblEmployees.setValueAt(DOB,r, 4);
            tblEmployees.setValueAt(MANAGER,r, 5);
            tblEmployees.setValueAt(EMPCODE,r, 6);
            tblEmployees.setValueAt(MPASS,r, 7);
      
            r++;
            }
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
        
    }//GEN-LAST:event_btnPopulateItems3ActionPerformed

    private void btnDefOrderItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefOrderItemsActionPerformed
         //delete table
        dropTable("ORDER_ITEMS");
       System.out.println("ORDER_ITEMS table Deleted");
        
        //make table
       createTable("create table ORDER_ITEMS(ORDER_ITEM_ID int NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), ORDER_ID int,ITEM_ID int)");
       System.out.println("Table Created");
        
        try
        {
        createConnection();
        stmt = conn.createStatement();
        //insert code from http://www.tutorialspoint.com/jdbc/jdbc-insert-records.htm
        
         //ORDER_ITEM ID, ORDERID, ITEMID 
        String sql = "INSERT INTO ORDER_ITEMS VALUES "
                + "(DEFAULT, 0, 34),"
                + "(DEFAULT, 0, 45),"
                + "(DEFAULT, 0, 22),"
                + "(DEFAULT, 1, 12),"
                + "(DEFAULT, 1, 14)";
        stmt.executeUpdate(sql);
        System.out.println("Insert statement successful");
        }
        catch(SQLException e)
        {
          System.out.println(e);
        }
        
        
    }//GEN-LAST:event_btnDefOrderItemsActionPerformed

    private void btnDefaultOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultOrdersActionPerformed
        //delete table
         dropTable("ORDERS");
        System.out.println("ORDERS table deleted");
        
        //create table
        createTable("create table ORDERS(ORDER_ID int NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), EMP_ID int,PRICE varchar(255),TIME varchar(255),DATE varchar(255), TABLE_ID int)");
       System.out.println("Table Created");
        
        try
        {
        createConnection();
        stmt = conn.createStatement();
        //insert code from http://www.tutorialspoint.com/jdbc/jdbc-insert-records.htm
        
         //ORDER_ID, EMP_ID, PRICE (VARCHAR), TIME (VARCHAR), DATE (VARCHAR)
        //DEFAULT - PG 44 of https://db.apache.org/derby/docs/10.8/ref/refderby.pdf
        String sql = "INSERT INTO ORDERS VALUES "
                + "(DEFAULT,0, '25', '14:12','02/05/2014',1),"
                + "(DEFAULT,1, '25', '15:23','02/05/2014',2),"
                + "(DEFAULT,2, '25', '16:34','02/05/2014',3),"
                + "(DEFAULT,3, '25', '17:56','02/05/2014',4),"
                + "(DEFAULT,4, '25', '12:30','02/05/2014',5)";
        stmt.executeUpdate(sql);
        System.out.println("Insert statement successful");
        }
        catch(SQLException e)
        {
          System.out.println(e);
        }
        
        
    }//GEN-LAST:event_btnDefaultOrdersActionPerformed

    private void btnDefaultEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultEmployeesActionPerformed
        //delete table
        dropTable("EMPLOYEES");
        System.out.println("EMPLOYEES table Deleted");
        
        
        //create table
       createTable("create table EMPLOYEES(EMP_ID int NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), FNAME varchar(255),SNAME varchar(255), ADDRESS varchar(255),DOB varchar(255),MANAGER boolean, EMPCODE varchar(255), MPASS varchar(255), SIGNED_IN boolean)");
       System.out.println("Table Created");        
        try
        {
        createConnection();
        stmt = conn.createStatement();
        //insert code from http://www.tutorialspoint.com/jdbc/jdbc-insert-records.htm
        //DEFAULT FROM https://db.apache.org/derby/docs/10.8/ref/refderby.pdf pg 44
        
         //EMP_ID int, FNAME varchar(255),SNAME varchar(255), ADDRESS varchar(255),
        //DOB varchar(255),MANAGER boolean, EMPCODE varchar(255), MPASS varchar(255)
        String sql = "INSERT INTO EMPLOYEES VALUES "
                + "(DEFAULT, 'DYLAN', 'WESTFALL','02 CLOC DUBH CORK', '12-08-1997', false,'1111','NONE', false),"
                + "(DEFAULT, 'BRIAN', 'SWAYNE','03 CLOC DUBH CORK', '12/09/1990', false,'2222','NONE', false),"
                + "(DEFAULT, 'ANTHONY', 'HAYES','04 CLOC DUBH CORK', '12/10/1991', false,'3333','NONE', false),"
                + "(DEFAULT, 'MIKEY', 'KENEFICK','05 CLOC DUBH CORK', '12/11/1991', false,'4444','NONE', false),"
                + "(DEFAULT, 'VERITY', 'SMART','06 CLOC DUBH CORK', '12/11/1988', true,'5555','NONE', false),"
                + "(DEFAULT, 'GAYE', 'MARCH','07 CLOC DUBH CORK', '12/11/1987', true,'6666','NONE', false)";
        stmt.executeUpdate(sql);
        System.out.println("Insert statement successful");
        }
        catch(SQLException e)
        {
          System.out.println(e);
        }
    }//GEN-LAST:event_btnDefaultEmployeesActionPerformed

    private void btnClearItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearItemsActionPerformed
        clearJTable(tblItems);
    }//GEN-LAST:event_btnClearItemsActionPerformed

    private void btnClearOrderJTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOrderJTableActionPerformed
       clearJTable(tblOrders);
    }//GEN-LAST:event_btnClearOrderJTableActionPerformed

    private void btnClearEmployeeJTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearEmployeeJTableActionPerformed
       clearJTable(tblEmployees);
    }//GEN-LAST:event_btnClearEmployeeJTableActionPerformed

    private void clearOrderItemJTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOrderItemJTableActionPerformed
        clearJTable(tblEmployees);
    }//GEN-LAST:event_clearOrderItemJTableActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          new frmManager().setVisible(true);
        //delete the form - not taking up memory!
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lstTestOrdersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstTestOrdersValueChanged
        clearJTable(tblTest);
        String value = (String) lstTestOrders.getSelectedValue();
        int intvalue = Integer.valueOf(value);
        
        //int ORDER_ITEM_ID = 0;
        int ORDER_ITEM_ID;
        int ORDER_ID;
        int EMP_ID;
        
        int r = 0;
        try
        {
          
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select * from ORDER_ITEMS where ORDER_ID =" + intvalue);
            ResultSetMetaData rsmd = results.getMetaData();
            
          
            while(results.next())
            {
            
             
            ORDER_ITEM_ID = results.getInt(1);
            ORDER_ID = results.getInt(2);
            EMP_ID = results.getInt(3);
            
            tblTest.setValueAt(ORDER_ITEM_ID,r, 0);
            tblTest.setValueAt(ORDER_ID,r, 1);
            tblTest.setValueAt(EMP_ID,r, 2);
            
            r++;
            }
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
    }//GEN-LAST:event_lstTestOrdersValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         //ORDER_ID (INT), EMP_ID (INT), PRICE (VARCHAR), TIME (VARCHAR), DATE (VARCHAR) 
        int ORDER_ID= 0;
        int r = 0;
        try
        {
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select ORDER_ID from ORDERS");
            ResultSetMetaData rsmd = results.getMetaData();
            int numberCols = rsmd.getColumnCount();
          
            while(results.next())
            {
           
                
            ORDER_ID = results.getInt(1);       
            myListModel.addElement(String.valueOf(ORDER_ID));
            r++;
            }
            lstTestOrders.setModel(myListModel);
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed
    
//    private static void createTable(String sqlString){
//        try{
//            createConnection();
//            stmt = conn.createStatement();
//            stmt.execute(sqlString);
//            stmt.close();
//            //
//        }
//        catch(SQLException sqlExcept){
//            sqlExcept.printStackTrace();
//        }
//    } 
//    
//    
   private static void createConnection()
   {
       try
      {
           Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
           //Get a connection
           conn = DriverManager.getConnection(dbURL); 
       }
       catch (Exception except)
       {
           except.printStackTrace();
       }
   }
    
    private static void shutdown()
    {
       try
        {
           if (stmt != null)
           {
               //stmt.close();
           }
           if (conn != null)
          {
               DriverManager.getConnection(dbURL + ";shutdown=true");
              //conn.close();
          }           
       }
       catch (SQLException sqlExcept)
        {
            //https://db.apache.org/derby/docs/10.9/devguide/tdevdvlp40464.html
            //"A successful shutdown always results in an SQLException to indicate that Derby has shut down and that there is no other exception."        
        }

   }
      
     public void populateItemsTable(JTable relevantTable, String tableName)
    {
        int id;
        String Name;
        String Price;
        int r =0;
        try
        {
            createConnection();
            stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery("select * from " + tableName);
            ResultSetMetaData rsmd = results.getMetaData();
            int numberCols = rsmd.getColumnCount();
            for (int i=1; i<=numberCols; i++)
            {
                //print Column Names
                System.out.print(rsmd.getColumnLabel(i)+"\t");  
            }
           System.out.println();
            
            while(results.next())
            {
            
                
            id = results.getInt(1);
            Name = results.getString(2);
            Price = results.getString(3);
    
           
   
            relevantTable.setValueAt(id,r, 0);
            relevantTable.setValueAt(Name,r, 1);
            relevantTable.setValueAt(Price,r, 2);
      
            r++;
            }
            results.close();
            stmt.close();
            shutdown();
        }
        catch (SQLException sqlExcept)
        {
           sqlExcept.printStackTrace();
        }
        
                
    }  
    
//    private static void dropTable(String table){
//        try{
//            createConnection();
//            stmt = conn.createStatement();
//            stmt.execute("drop table " + table);
//            stmt.close();
//            
//        }
//        catch(SQLException sqlExcept){
//            sqlExcept.printStackTrace();
//        }
//    } 
//    //clear the table and set rows = 100 again
    public void clearJTable(JTable myJTable)
    {
            ((DefaultTableModel)myJTable.getModel()).setRowCount(0);
            ((DefaultTableModel)myJTable.getModel()).setRowCount(100);
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDatabases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDatabases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDatabases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDatabases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDatabases().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearEmployeeJTable;
    private javax.swing.JButton btnClearItems;
    private javax.swing.JButton btnClearOrderJTable;
    private javax.swing.JButton btnDefOrderItems;
    private javax.swing.JButton btnDefaultEmployees;
    private javax.swing.JButton btnDefaultItems;
    private javax.swing.JButton btnDefaultOrders;
    private javax.swing.JButton btnOrdersPopulate;
    private javax.swing.JButton btnPopulateItems;
    private javax.swing.JButton btnPopulateItems3;
    private javax.swing.JButton btnPopulateOrderItems;
    private javax.swing.JButton clearOrderItemJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jtpDatabases;
    private javax.swing.JList lstTestOrders;
    private javax.swing.JPanel pnlEmployees;
    private javax.swing.JPanel pnlItems;
    private javax.swing.JPanel pnlOrderItems;
    private javax.swing.JPanel pnlOrders;
    private javax.swing.JPanel pnlPayTest;
    private javax.swing.JTable tblEmployees;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblOrderItems;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTable tblTest;
    // End of variables declaration//GEN-END:variables
}
